// Generated by CoffeeScript 1.3.3
(function() {
  var Alphabet, Coders, CompressedKeys, Conversions, Module, PackedCalls, TinySocketApi, cnv, ext, int_args, int_list, lg, pc, puts, _,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  ext = require('./extensions');

  lg = puts = function() {
    var s;
    s = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.log.apply(console, s);
  };

  Module = ext.Module;

  Alphabet = (function(_super) {

    __extends(Alphabet, _super);

    Alphabet.include(require('bases'));

    function Alphabet(byPosition) {
      var i, s, _i, _len, _ref;
      this.byPosition = byPosition;
      this.to_i = __bind(this.to_i, this);

      this.to_s = __bind(this.to_s, this);

      this.pad = __bind(this.pad, this);

      this.base = this.byPosition.length;
      this.byLetter = {};
      _ref = this.byPosition.split("");
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        s = _ref[i];
        this.byLetter[s] = i;
      }
      this.padChar = this.to_s(0);
      this.replacePad = RegExp("^" + this.padChar + "+");
    }

    Alphabet.prototype.pad = function(s, len, padChar) {
      if (padChar == null) {
        padChar = this.padChar;
      }
      while (s.length < len) {
        s = padChar + s;
      }
      return s;
    };

    Alphabet.prototype.to_s = function(i, padNumChars) {
      var s;
      if (padNumChars == null) {
        padNumChars = false;
      }
      s = this.toAlphabet(i, this.byPosition);
      if (padNumChars) {
        return this.pad(s, padNumChars);
      } else {
        return s;
      }
    };

    Alphabet.prototype.to_i = function(str, padTo) {
      var digits, i, int, len, multi, num, s, _i, _len, _ref;
      if (padTo == null) {
        padTo = false;
      }
      digits = str.split("");
      if (padTo) {
        str = str.replace(this.replacePad, "");
      }
      _ref = [digits.length, 0], len = _ref[0], num = _ref[1];
      for (i = _i = 0, _len = digits.length; _i < _len; i = ++_i) {
        s = digits[i];
        int = this.byLetter[s];
        multi = Math.pow(this.base, len - i - 1);
        if (multi > 0) {
          int = int * multi;
        }
        num += int;
      }
      return num;
    };

    return Alphabet;

  })(Module);

  Conversions = (function(_super) {
    var _ref;

    __extends(Conversions, _super);

    function Conversions() {
      return Conversions.__super__.constructor.apply(this, arguments);
    }

    Conversions.include(require('bases'));

    Conversions.e64 = new Alphabet(["1234567890", "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "-_"].join(''));

    Conversions.e93 = Conversions.alphabet = new Alphabet(["~`!1@2#3$4%5^6&7*8(9)0", " _-+={[}]|:;'<,>.?/", "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"].join(''));

    _ref = Conversions.alphabet, Conversions.to_s = _ref.to_s, Conversions.to_i = _ref.to_i;

    return Conversions;

  })(Module);

  CompressedKeys = (function(_super) {
    var ck_i, cnv;

    __extends(CompressedKeys, _super);

    cnv = Conversions;

    ck_i = -1;

    CompressedKeys.include(_);

    function CompressedKeys(named, opts) {
      var cb, counterStartAt, k, key, sorted, v, _i, _len, _ref;
      this.named = named;
      if (opts == null) {
        opts = {};
      }
      this.tinyForName = __bind(this.tinyForName, this);

      this.nameForTiny = __bind(this.nameForTiny, this);

      counterStartAt = opts.counterStartAt;
      if (counterStartAt) {
        ck_i = counterStartAt;
      }
      this.tiny = {};
      sorted = this.sortBy((function() {
        var _ref, _results;
        _ref = this.named;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push([k, v]);
        }
        return _results;
      }).call(this), function(_arg) {
        var cb, key;
        key = _arg[0], cb = _arg[1];
        return key;
      });
      for (_i = 0, _len = sorted.length; _i < _len; _i++) {
        _ref = sorted[_i], key = _ref[0], cb = _ref[1];
        this.tiny[cnv.to_s(ck_i += 1)] = cb;
      }
    }

    CompressedKeys.prototype.findParallelKey = function(key, first, second) {
      var key2, val, val2;
      if (val = first[key]) {
        for (key2 in second) {
          val2 = second[key2];
          if (val === val2) {
            return key2;
          }
        }
        return false;
      } else {
        return false;
      }
    };

    CompressedKeys.prototype.nameForTiny = function(tiny) {
      return this.findParallelKey(tiny, this.tiny, this.named);
    };

    CompressedKeys.prototype.tinyForName = function(name) {
      return this.findParallelKey(name, this.named, this.tiny);
    };

    return CompressedKeys;

  })(Module);

  PackedCalls = (function(_super) {
    var cnv;

    __extends(PackedCalls, _super);

    function PackedCalls() {
      return PackedCalls.__super__.constructor.apply(this, arguments);
    }

    cnv = Conversions;

    PackedCalls.unpacker = function() {
      var argConsumers, fnToCallWithArgs, _i;
      argConsumers = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), fnToCallWithArgs = arguments[_i++];
      if (fnToCallWithArgs == null) {
        fnToCallWithArgs = puts;
      }
      return function(s) {
        var argFn, args, rest, val, _j, _len, _ref;
        args = [];
        for (_j = 0, _len = argConsumers.length; _j < _len; _j++) {
          argFn = argConsumers[_j];
          _ref = argFn(s), val = _ref[0], rest = _ref[1];
          s = rest;
          args.push(val);
        }
        if (!rest || rest.length === 0 || rest === "") {
          return fnToCallWithArgs.apply(null, args);
        } else {
          return fnToCallWithArgs.apply(null, __slice.call(args).concat([rest]));
        }
      };
    };

    PackedCalls.s2a = function(bytes) {
      return function(s) {
        var i, val, _i, _ref;
        val = [];
        for (i = _i = 0, _ref = s.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = _i += bytes) {
          val.push(cnv.to_i(s.slice(i, i + bytes), bytes));
        }
        return [val, []];
      };
    };

    PackedCalls.a2s = function(bytes) {
      return function(rest) {
        var i, total, _i, _len;
        total = "";
        for (_i = 0, _len = rest.length; _i < _len; _i++) {
          i = rest[_i];
          total += cnv.to_s(i, bytes);
        }
        return [total, []];
      };
    };

    PackedCalls.s2i = function(bytes) {
      return function(s) {
        return [cnv.to_i(s.slice(0, bytes)), s.slice(bytes)];
      };
    };

    PackedCalls.i2s = function(bytes) {
      return function(rest) {
        var val;
        val = cnv.to_s(rest.shift(), bytes);
        return [val, rest];
      };
    };

    return PackedCalls;

  })(Module);

  TinySocketApi = (function(_super) {
    var cnv, pad;

    __extends(TinySocketApi, _super);

    cnv = Conversions;

    pad = cnv.alphabet.pad;

    TinySocketApi.include(_);

    TinySocketApi.prototype.dispatch_message = function(s) {
      return this.dispatch[s != null ? s[0] : void 0](s.slice(1));
    };

    TinySocketApi.prototype.sock_has_message_listener = function(sock) {
      var _ref;
      return this.contains((_ref = sock.$events) != null ? _ref.message : void 0, sock.dispatch_message);
    };

    function TinySocketApi(_arg) {
      this.serverListens = _arg.serverListens, this.clientListens = _arg.clientListens;
      this.setClient = __bind(this.setClient, this);

      this.setServer = __bind(this.setServer, this);

      this.useMessages = __bind(this.useMessages, this);

      this.useEvents = __bind(this.useEvents, this);

      this.make_message_listener = __bind(this.make_message_listener, this);

      this.debug = __bind(this.debug, this);

      this.dispatch_message = __bind(this.dispatch_message, this);

      this.dispatch = {};
      this.useMessages();
      this.serverApi = new CompressedKeys(this.serverListens, {
        startCounterAt: -1
      });
      this.clientApi = new CompressedKeys(this.clientListens);
      this.debug();
    }

    TinySocketApi.prototype.debug = function() {
      var k, v, _ref, _ref1, _results;
      _ref = this.clientApi.tiny;
      for (k in _ref) {
        v = _ref[k];
        puts(["------", k, this.clientApi.nameForTiny(k)]);
      }
      _ref1 = this.serverApi.tiny;
      _results = [];
      for (k in _ref1) {
        v = _ref1[k];
        _results.push(puts(["------", k, this.serverApi.nameForTiny(k)]));
      }
      return _results;
    };

    TinySocketApi.prototype.make_emitter = function(sock, evt) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return sock.emit(evt, args);
      };
    };

    TinySocketApi.prototype.make_sender = function(sock, evt) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return sock.send("" + (pad(evt, 1)) + args[0]);
      };
    };

    TinySocketApi.prototype.make_event_listener = function(sock, evt, cb) {
      return sock.on(evt, cb);
    };

    TinySocketApi.prototype.make_message_listener = function(sock, evt, cb) {
      return sock.dispatch_table[pad(evt, 1)] = cb;
    };

    TinySocketApi.prototype.useEvents = function() {
      this.sender = this.make_emitter;
      return this.receiver = this.make_event_listener;
    };

    TinySocketApi.prototype.useMessages = function() {
      this.sender = this.make_sender;
      return this.receiver = this.make_message_listener;
    };

    TinySocketApi.prototype.setEmitters = function(sock, api) {
      var cb, evt, fn, fname, _ref, _results;
      _ref = api.named;
      _results = [];
      for (fname in _ref) {
        cb = _ref[fname];
        evt = api.findParallelKey(fname, api.named, api.tiny);
        fn = this.sender(sock, evt);
        if (cb.has_encoder) {
          fn = cb.make_encoder(fn);
        }
        _results.push(sock[fname] = fn);
      }
      return _results;
    };

    TinySocketApi.prototype.setListeners = function(sock, api) {
      var cb, evt, _ref, _results;
      _ref = api.tiny;
      _results = [];
      for (evt in _ref) {
        cb = _ref[evt];
        _results.push(this.receiver(sock, evt, cb));
      }
      return _results;
    };

    TinySocketApi.prototype.dispatchify = function(sock) {
      var tbl;
      tbl = sock.dispatch_table = {};
      sock.dispatch_message = function(s) {
        var k;
        k = s != null ? s[0] : void 0;
        if (tbl[k]) {
          return tbl[k](s.slice(1));
        } else {
          return console.log("COULDN'T DISPATCH: " + k);
        }
      };
      return sock.on('message', sock.dispatch_message);
    };

    TinySocketApi.prototype.setServer = function(sock) {
      this.dispatchify(sock);
      this.setEmitters(sock, this.clientApi);
      return this.setListeners(sock, this.serverApi);
    };

    TinySocketApi.prototype.setClient = function(sock) {
      this.dispatchify(sock);
      this.setEmitters(sock, this.serverApi);
      return this.setListeners(sock, this.clientApi);
    };

    return TinySocketApi;

  })(Module);

  pc = PackedCalls;

  cnv = Conversions;

  Coders = (function(_super) {
    var _this = this;

    __extends(Coders, _super);

    function Coders() {
      return Coders.__super__.constructor.apply(this, arguments);
    }

    Coders.define_coder = function(triplets, fn) {
      var bytes, decargs, decode, decoder, encargs, encode, _i, _len, _ref;
      encargs = [];
      decargs = [];
      for (_i = 0, _len = triplets.length; _i < _len; _i++) {
        _ref = triplets[_i], encode = _ref[0], decode = _ref[1], bytes = _ref[2];
        encargs.push(encode(bytes));
        decargs.push(decode(bytes));
      }
      decoder = pc.unpacker.apply(pc, __slice.call(decargs).concat([fn]));
      decoder.has_encoder = true;
      decoder.args_encoders = encargs;
      decoder.make_encoder = function(outfn) {
        if (outfn == null) {
          outfn = fn;
        }
        return pc.unpacker.apply(pc, __slice.call(encargs).concat([outfn]));
      };
      return decoder;
    };

    Coders.int_list = function(bytes, fn) {
      return Coders.define_coder([[pc.a2s, pc.s2a, bytes]], fn);
    };

    Coders.int_args = function() {
      var arg_bytes, bytes, fn, triplets, _i, _j, _len;
      arg_bytes = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), fn = arguments[_i++];
      triplets = [];
      for (_j = 0, _len = arg_bytes.length; _j < _len; _j++) {
        bytes = arg_bytes[_j];
        triplets.push([pc.i2s, pc.s2i, bytes]);
      }
      return Coders.define_coder(triplets, fn);
    };

    return Coders;

  }).call(this, Module);

  int_list = Coders.int_list, int_args = Coders.int_args;

  exports.PackedCalls = PackedCalls;

  exports.Conversions = Conversions;

  exports.Alphabet = Alphabet;

  exports.Coders = Coders;

  exports.TinySocketApi = TinySocketApi;

  exports.tests = {
    multiArgs: function() {
      var a, arg, b, bytes, fn, unpackCall;
      cnv = Conversions;
      pc = PackedCalls;
      bytes = b = 1;
      fn = function(a, b) {
        lg("THEY GAVED MEZ: " + a + " and " + b);
        return lg("a + b == 4? " + ((a + b) === 4));
      };
      a = cnv.to_s(1, b);
      b = cnv.to_s(3, b);
      arg = a + b;
      unpackCall = pc.unpacker(pc.s2i(b), pc.s2i(b), fn);
      return lg(unpackCall(arg));
    },
    basicArgs: function() {
      var fried, refried, repack, unpack;
      cnv = Conversions;
      pc = PackedCalls;
      unpack = pc.unpacker(pc.s2i(5), function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        lg("NO WAY. AWESOME ARGS ---> ");
        lg(JSON.stringify(args[0]));
        return args[0];
      });
      repack = pc.unpacker(pc.i2s(5), function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        lg("REPACKED BRAH!!!");
        lg(JSON.stringify(args[0]));
        return args[0];
      });
      lg(unpack(cnv.to_s(12345)));
      lg(fried = repack([12345]));
      lg("fried: " + fried);
      return lg(refried = unpack(fried));
    },
    conversions: function() {
      var fails, i, s, tot, yay, _i, _len, _ref;
      cnv = Conversions;
      fails = [];
      _ref = [10, 91, 200, 2000, 4123, 6540, 12000];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        s = cnv.to_s(i);
        puts("CONVERTING: " + i + " -> '" + s + "' -> ?");
        puts("conversion works: -- " + (yay = (tot = cnv.to_i(s)) === i));
        puts("          = " + tot);
        if (!yay) {
          fails.push(i);
        }
      }
      puts(fails.length > 0 ? "FAILS: " + fails : "SUCCESSES!");
      puts("PADDING OUT A STRING:");
      return puts("Padding out to 5 chars: " + (cnv.alphabet.pad('XXX', 5)));
    }
  };

  exports.test = function() {
    var name, testFn, _ref, _results;
    _ref = exports.tests;
    _results = [];
    for (name in _ref) {
      testFn = _ref[name];
      lg("RUNNING TEST: " + name);
      _results.push(testFn());
    }
    return _results;
  };

}).call(this);
